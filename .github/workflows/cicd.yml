name: Web API Deploy Pipeline
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'api-demo/**'

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: Tokushige1
  ECS_SERVICE: Tokushige1-service2
  ECR_REPOSITORY: tokushige1
  ECS_TASK_DEFINITION: api-demo/.aws/task-def.json

permissions:
  id-token: write
  contents: read

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: api-demo
    steps:
      - uses: actions/checkout@v4

      - name: Run Tests and Build an Image
        run: docker buildx build \
             --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} \
             --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} \
             -t temp_api_image:latest \
             --load \
             .

      - name: Build Apache image
        run: docker build -f Dockerfile.apache -t temp_apache_image:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Push the api image to Amazon ECR
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        run: |
          docker image tag temp_api_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:api-${{github.sha}}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:api-${{github.sha}}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:api-${{github.sha}} > api-image-uri.txt
        
      - name: Push the apache image to Amazon ECR
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        run: |
          docker image tag temp_apache_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:apache-${{github.sha}}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:apache-${{github.sha}}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:apache-${{github.sha}} > apache-image-uri.txt
      
      - name: Upload the image uri files as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-uris
          path: |
            api-demo/api-image-uri.txt
            api-demo/apache-image-uri.txt

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_TO_ASSUME}}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: image-uris
          path: artifacts

      - name: Define the image uri
        run: |
          echo "API_IMAGE_URI=$(cat artifacts/api-image-uri.txt)">>$GITHUB_ENV
          echo "APACHE_IMAGE_URI=$(cat artifacts/apache-image-uri.txt)">>$GITHUB_ENV

      - name: Render API container
        id: render-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: api
          image: ${{ env.API_IMAGE_URI }}

      - name: Render Apache container
        id: render-apache
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-api.outputs.task-definition }}
          container-name: apache
          image: ${{ env.APACHE_IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{steps.render-apache.outputs.task-definition}}
          service: ${{env.ECS_SERVICE}}
          cluster: ${{env.ECS_CLUSTER}}
          wait-for-service-stability: true